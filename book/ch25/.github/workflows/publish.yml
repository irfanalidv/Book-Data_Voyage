name: Build and Publish Python Package

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 0.1.0)'
        required: true
        default: '0.1.0'

env:
  PYTHON_VERSION: "3.11"
  PACKAGE_NAME: "datascience_toolkit"

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11]
        os: [ubuntu-latest]
        exclude:
          - os: windows-latest
            python-version: 3.8
          - os: windows-latest
            python-version: 3.9
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Upgrade pip and setuptools
      run: |
        python -m pip install --upgrade pip setuptools wheel
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run linting checks
      run: |
        echo "Running flake8..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
        echo "Running black check..."
        black --check --diff .
        
        echo "Running isort check..."
        isort --check-only --diff .
        
        echo "Running mypy..."
        mypy datascience_toolkit/ --ignore-missing-imports
    
    - name: Run security checks
      run: |
        echo "Running bandit security scan..."
        bandit -r datascience_toolkit/ -f json -o bandit-report.json || true
        
        echo "Running safety check..."
        safety check --json --output safety-report.json || true
    
    - name: Run tests with pytest
      run: |
        pytest --cov=${{ env.PACKAGE_NAME }} \
               --cov-report=xml \
               --cov-report=html \
               --cov-report=term-missing \
               --cov-fail-under=80 \
               --junitxml=test-results.xml \
               -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results.xml
          bandit-report.json
          safety-report.json
          htmlcov/
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-${{ matrix.python-version }}
        path: htmlcov/

  build:
    name: Build package
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools wheel
    
    - name: Build package
      run: |
        python -m build --sdist --wheel
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  publish-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Publish to TestPyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
      run: |
        twine upload dist/*
    
    - name: Test installation from TestPyPI
      run: |
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ ${{ env.PACKAGE_NAME }}==${{ github.ref_name }}
        python -c "import ${{ env.PACKAGE_NAME }}; print('Successfully installed from TestPyPI')"

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build, publish-testpypi]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
    
    - name: Verify publication
      run: |
        sleep 30  # Wait for PyPI to update
        pip install ${{ env.PACKAGE_NAME }}==${{ github.ref_name }}
        python -c "import ${{ env.PACKAGE_NAME }}; print('Successfully installed from PyPI')"

  documentation:
    name: Build and deploy documentation
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install documentation dependencies
      run: |
        pip install -r requirements-docs.txt
    
    - name: Build documentation
      run: |
        cd docs
        make html
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/build/html
        cname: ${{ env.PACKAGE_NAME }}.github.io

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [publish-pypi, documentation]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        body: |
          ## What's Changed
          
          This release includes:
          - New features and improvements
          - Bug fixes and optimizations
          - Documentation updates
          
          ## Installation
          
          ```bash
          pip install ${{ env.PACKAGE_NAME }}==${{ github.ref_name }}
          ```
          
          ## Documentation
          
          Full documentation available at: https://${{ env.PACKAGE_NAME }}.readthedocs.io
          
          ## Changelog
          
          See CHANGELOG.md for detailed changes.
        
        files: |
          dist/*.tar.gz
          dist/*.whl
